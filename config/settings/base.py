"""
Django settings for portfolyoFaruk project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
import environ
from discord_logger import DiscordLogger
from config.settings.models import ApiHostModel


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

env = environ.Env()
environ.Env.read_env(BASE_DIR.joinpath('.env'))

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',

    # 'cloudinary_storage',
    # 'cloudinary',

]+[
    'Account',
    'Auth',
    'base',
    'projects',
    'Portfolyo',
    'Blog',
    'Communication',
    'dashboard',
    'Roadmap',
    'Game',
    'url_shortener',
]+[
    'mdeditor',
    'ckeditor',
    # 'whitenoise',
    # 'crispy_forms',
    # 'cloudinary_storage',
    'django.contrib.staticfiles',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'Auth.middleware.OTPMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = False


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "Account.CustomUserModel"


# STATIC_ROOT = os.path.join(BASE_DIR,'static')sss
#f4
# MEDIA_URL = "media/"
#
# MEDIA_ROOT = BASE_DIR.joinpath('media')
#f4
CRISPY_TEMPLATE_PACK = 'bootstrap4'

#
import cloudinary
#
#
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': env('CLOUDINARY_STORAGE_CLOUD_NAME'),
    'API_KEY': env('CLOUDINARY_STORAGE_API_KEY'),
    'API_SECRET': env('CLOUDINARY_STORAGE_API_SECRET'),
    # 'UPLOAD_OPTIONS': {
    #     'resource_type': 'auto',
    #     'tags': ['django_uploads']
    # }
}

CLOUDINARY_NAME = env('CLOUDINARY_STORAGE_CLOUD_NAME')
CLOUDINARY_API_KEY = env('CLOUDINARY_STORAGE_API_KEY')
CLOUDINARY_API_SECRET = env('CLOUDINARY_STORAGE_API_SECRET')


#
cloudinary.config(
  cloud_name=CLOUDINARY_NAME,
  api_key=CLOUDINARY_API_KEY,
  api_secret=CLOUDINARY_API_SECRET,
  UPLOAD_OPTIONS= {
    'resource_type': 'auto',
    'tags': ['django_uploads']
})


# DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/


# COMPRESS_ENABLED = True
# WHITENOISE_MANIFEST_STRICT = False

# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"
# STATICFILES_FINDERS=[
#     "django.contrib.staticfiles.finders.FileSystemFinder",
#     "django.contrib.staticfiles.finders.AppDirectoriesFinder",
# ]


STATIC_URL = 'static/'
STATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")

]

DISCORD_LOGGER_WEBHOOK_URL = env('DISCORD_LOGGER_WEBHOOK_URL')
discord_logger_options = {
    "application_name": "My Server",
    "service_name": "Backend DJANGO",
    "service_icon_url": "https://github.com/f4ruk-seker.png",
    "service_environment": "Production",
    "default_level": "info",
}

CUSTOM_LOGGER = DiscordLogger(webhook_url=DISCORD_LOGGER_WEBHOOK_URL, **discord_logger_options)


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': True,
#     'handlers': {
#         'discord': {
#             'level': 'ERROR',  # İstenilen seviye
#             'class': 'discord_logger.DiscordLoggerDjango',  # DiscordLogger sınıfının modül yolu
#             'webhook_url': DISCORD_LOGGER_WEBHOOK_URL,
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['discord'],
#             # 'level': 'ERROR',
#             'level': 'WARN',
#             'propagate': True,
#         },
#     },
# }

MDEDITOR_CONFIGS = {
    'default': {
        'language': 'en'
    }
}

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
    },
}

# IP query service :

API_QUERY_HOST = ApiHostModel(env('API_QUERY_HOST'))
API_QUERY_PATH = env('API_QUERY_PATH')

